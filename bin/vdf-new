#!/usr/bin/env python

"""Analyse a veto definer file in full using the GWpy VET package"""

from __future__ import print_function

import os
import sys
import re

from gwpy.segments import flag
from gwvet.segments import get_known_flags

from math import (ceil, floor)
from urlparse import urlparse
from urllib2 import urlopen
from argparse import ArgumentParser
from getpass import getuser
from subprocess import (Popen, PIPE, CalledProcessError)
try:
    from configparser import (ConfigParser, NoSectionError)
except ImportError:
    from ConfigParser import (ConfigParser, NoSectionError)
try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict

from gwpy.time import to_gps
from gwpy.segments import (Segment, SegmentList,
                           DataQualityFlag, DataQualityDict)

from gwsumm.state import SummaryState
from gwsumm.utils import (re_cchar, mkdir, get_default_ifo)


DEFAULT_METRICS = ['Deadtime', 'Efficiency', 'Efficiency/Deadtime', 'Use percentage', 'Loudest event by SNR']

ConfigParser._dict = OrderedDict

try:
    IFO = get_default_ifo()
except ValueError:
    IFO = None

def add_config_section(config, section, **params):
    config.add_section(section)
    for key, val in params.iteritems():
        config.set(section, key, val)


def configure_veto_tab(section, parent, state, flags, segmentfile, metrics,
                       **params):
    tab = 'tab-%s' % section
    config.add_section(tab)
    params.setdefault('type', 'veto-flag')
    params.setdefault('name', section)
    if parent is not None:
        params.setdefault('parent', parent)
    params.setdefault('flags', ','.join(flags))
    params.setdefault('union', '|'.join(flags))
    params.setdefault('intersection', '&'.join(flags))
    params.setdefault('states', state.key)
    params.setdefault('veto-name', params['name'])
    params.setdefault('metrics', ','.join(metrics))
    # set others
    if 'event-channel' in params:
        params.setdefault('before', '%(event-channel)s')
        params.setdefault('after', '%(event-channel)s#%(union)s')
        params.setdefault('vetoed', '%(event-channel)s@%(union)s')
    for key, val in params.iteritems():
        config.set(tab, key, val)
    return tab


# -----------------------------------------------------------------------------
#
# set up command line and parse
#
# -----------------------------------------------------------------------------
parser = ArgumentParser(description=__doc__)
parser.add_argument('-v', '--verbose', action='store_true',
                    help='print verbose output')
#parser.add_argument('-V', '--version', action='version', version=__version__)
parser._positionals.title = 'Positional arguments'
parser._optionals.title = 'Optional arguments'

# required argument
parser.add_argument('veto-definer-file', help='path to veto definer file')
parser.add_argument('gps-start-time', type=to_gps,
                    help='GPS start time/date of analysis')
parser.add_argument('gps-end-time', type=to_gps,
                    help='GPS end time/date of analysis')

analargs = parser.add_argument_group('Analysis options')
analargs.add_argument('-f', '--config-file', type=os.path.abspath,
                      default=[], action='append',
                      help='path to INI file defining this analysis')
analargs.add_argument('-i', '--ifo', default=IFO,
                      help='prefix of IFO to study, default: %(default)s')
analargs.add_argument('-o', '--output-directory', default=os.curdir,
                      type=os.path.abspath,
                      help='output directory path, default: %(default)s, '
                           'this path should be web-viewable')
analargs.add_argument('-c', '--categories', default='1,2,3,4',
                      help='list of categories to analyse, '
                           'default: %(default)s')
analargs.add_argument('-m', '--metric', action='append',
                      help='name of metric to use in analysis, '
                           'can be given multiple times, default: %s'
                           % DEFAULT_METRICS)
analargs.add_argument('-I', '--independent', action='store_true',
                      help='analyse categories independently, rather than '
                           'hierarchichally, default: hierarchichally')
analargs.add_argument('-g', '--global-config', action='append', default=[],
                      help='path to gwsumm configuration file passed to all '
                           'gw_summary jobs')

trigargs = parser.add_argument_group('Trigger options')
trigargs.add_argument('-x', '--event-channel',
                      default=IFO and '%s:GDS-CALIB_STRAIN' % IFO or None,
                      help='name of event trigger channel, '
                           'default: %(default)s')
trigargs.add_argument('-G', '--event-generator', default='Omicron',
                      help='name of event trigger generator, '
                           'default: %(default)s')
trigargs.add_argument('-X', '--event-file', help='path to event cache file')

segargs = parser.add_argument_group('Segment options')
segargs.add_argument(
    '-a', '--analysis-segments', action='append',
    default=IFO and ['%s:DMT-ANALYSIS_READY:1' % IFO] or None,
    help='flag indicating analysis time, or path of segment file containing '
         'segments for a single flag, default: %(default)s, can be given '
         'multiple times to use the intersection of many flags, or the union '
         'of many files')
segargs.add_argument('-n', '--analysis-name', default='Analysis',
                     help='Human-readable name for summary state, '
                          'e.g. \'Science\', default: %(default)s')
segargs.add_argument('-t', '--segment-url', dest='segdb',
                     default='https://segments.ligo.org',
                     help='url of segment database, default: %(default)s')
segargs.add_argument('-S', '--on-segdb-error', default='raise',
                     choices=['raise', 'ignore', 'warn'],
                     help='how to handle (dq)segdb errors, '
                          'default: %(default)s')

args = parser.parse_args()
ifo = args.ifo
start = getattr(args, 'gps-start-time')
end = getattr(args, 'gps-end-time')
span = Segment(start, end)
duration = int(ceil(end) - floor(start))

# -----------------------------------------------------------------------------
#
# set things up
#
# -----------------------------------------------------------------------------

tag = '%d-%d' % (start.seconds, end.seconds)
outdir = os.path.abspath(os.path.join(args.output_directory, tag))
mkdir(outdir)
os.chdir(outdir)
mkdir('etc', 'segments', 'condor')

#-------------------Vdf generator pulled from duncan's code--------------------------------

def vdf():
        os.chdir('segments')
        vetofile = getattr(args, 'veto-definer-file')
        if not urlparse(vetofile).netloc:
            vetofile = os.path.abspath(vetofile)
        if not args.metric:
            args.metric = DEFAULT_METRICS

        # -- read veto definer and process --------------
        if urlparse(vetofile).netloc:
            tmp = urlopen(vetofile)
            vetofile = os.path.abspath(os.path.basename(vetofile))
            with open(vetofile, 'w') as f:
                f.write(tmp.read())
            print('Downloaded veto definer file')

        vdf = DataQualityDict.from_veto_definer_file(vetofile, start=start, end=end,
                ifo=ifo, format ='ligolw')                                       
        print('Read %d flags from veto definer' % len(vdf.keys()))

        # populate veto definer file from database
        vdf.populate(source=args.segdb, on_error=args.on_segdb_error)

        return vdf
#-----------------End Duncan's code----------------------------------------------------------

'''
The goal of this section is to extract all the known flags from the database for a specified time, then extract the flags used by the vdf for that same time period 
We then compare the two sets of flags and subtract out the vdf flags from the database flags
The analysis is then run on the remaining flags
'''

#import known flags from database
knownFlags = get_known_flags(start,end,url=args.segdb, ifo=ifo, badonly=None)
vdf = vdf()

#create a dictionary and lists to identify the categories associated with each flag
cat = dict()
cat1 = []
cat2 = []
cat3 = []
cat4 = []

#split the flags into lists associated with their categories and then add them to the dicitonary
for i in range(len(vdf)):
        flag = vdf.keys()[i]
        categ = vdf['%s' %flag].category
        if len(vdf[flag].active) != 0:
                if categ == 1:
                        cat1.append(flag)
                elif categ == 2:
                        cat2.append(flag)
                elif categ == 3:
                        cat3.append(flag)
                elif categ == 4:
                        cat4.append(flag)
cat[1] = cat1
cat[2] = cat2
cat[3] = cat3
cat[4] = cat4

#Populate a DataQualityDict() with the knownFlags, making sure to filter out the non-active flags
segments = DataQualityDict() 
ALLSEGMENTS = DataQualityDict()

aflags = args.analysis_segments 
asegments = DataQualityFlag('%s:VET-ANALYSIS_SEGMENTS:0' % ifo) 
for i, flag in enumerate(aflags): 
    # use union of segments from a file 
    if os.path.isfile(flag): 
        asegments += DataQualityFlag.read(flag) 
    # or intersection of segments from multiple flags 
    else: 
        new = DataQualityFlag.query(flag, start, end, url=args.segdb) 
        if i: 
            asegments.known &= new.known 
            asegments.active &= new.active 
        else: 
            asegments.known = new.known 
            asegments.active = new.active 
ALLSEGMENTS[asegments.name] = asegments 
 
if os.path.isfile(aflags[0]): 
    asegments.filename = aflags 

#len(knownFlags)
for flag in range(20):
        query = DataQualityFlag.query(knownFlags[flag],start,end,url=args.segdb)
        if len(query.active) != 0:
                segments[knownFlags[flag]] = query
ALLSEGMENTS += segments
knownFlags = segments.keys()

#remove the flags assoicated with the vdf from the knownFlags in an order dependent on the categories
#kf[1] = knownFlags - cat1     kf[2] = knownFlags - cat1,4     kf[3] = knwonFlags - cat1,2,4    kf[4] = knwonFlags - cat1,2,3,4

kf = dict()

for categ in range(1,5):
        if categ == 1:
                known = knownFlags[:]
                knownCat = categ
        else:
                knownCat = categ-1
                known = kf[knownCat][:]

                if categ == 2:
                        knownCat = 4

        i = len(known) - 1
	category = cat[knownCat]

        while i >= 0:
                if known[i] in category:
                        known.pop(i)
                i-=1
        kf[categ] = known

#assign the flags remaining that have been categorized in the specific way into a dictionary for wasy access
dqFlags = dict()

for cat in range(1,5):
    segs = DataQualityDict()
    for i in range(len(kf[cat])):
        if kf[cat][i] in segments.keys():
            segs[kf[cat][i]] = segments[kf[cat][i]]
    dqFlags[cat] = segs
#dqFlags contains everything we want to do analysis on. The keys are the categories (1,2,3,4) based on 
#on the process of elimanting the vdfs that I explained above. The items are then the remaining flags from the database


states = dict()
categories = [1,2,3,4]


for i, category in enumerate(categories):
    title = isinstance(category, int) and 'Cat %d' % category or category
    tag = re_cchar.sub('_', str(title).upper())
    if i:
        states[category] = SummaryState('After %s' % oldtitle, key=tag,
                                        known=after.known,
                                        active=after.active,
                                        definition=after.name)
    else:
        states[category] = SummaryState(args.analysis_name,
                                        key=args.analysis_name,
                                        definition=asegments.name)
    try:
        segs = dqFlags[category].union()
    except TypeError:  # no flags
        segs = DataQualityFlag()
    segs.name = '%s:VET-ANALYSIS_%s:0' % (ifo, tag)
    ALLSEGMENTS[segs.name] = segs
    if i:
        after = after - segs
    else:
        after = asegments - segs
    after.name = '%s:VET-ANALYSIS_AFTER_%s:0' % (ifo, tag)
    ALLSEGMENTS[after.name] = after
    oldtitle = title

# write all segments to disk
segfile = os.path.abspath('%s-VET_SEGMENTS-%d-%d.xml.gz'
                          % (ifo, start.seconds, duration))
ALLSEGMENTS.write(segfile)

os.chdir(os.pardir)

# -----------------------------------------------------------------------------
#
# job preparation
#
# -----------------------------------------------------------------------------

os.chdir('etc')

configs = []
for category in categories:
    title = isinstance(category, int) and 'Category %d' % category or category
    tab = 'tab-%s' % title


    config = ConfigParser()

    # add segment-database configuration
    add_config_section(config, 'segment-database', url=args.segdb)

    # add plot configurations
    pconfig = ConfigParser()
    pconfig.read(args.config_file)
    for section in pconfig.sections():
        if section.startswith('plot-'):
            config._sections[section] = pconfig._sections[section].copy()

    try:
        plots = pconfig.items('plots-%s' % category, raw=True)
    except NoSectionError:
        try:
            plots = pconfig.items('plots', raw=True)
        except NoSectionError:
            plots = []

    # add state
    if args.independent:
        state = states[categories[0]]
    else:
        state = states[category]
    sname = 'state-%s' % state.key
    add_config_section(config, sname, key=state.key, name=state.name,
                       definition=state.definition, filename=segfile)

    # add plugin
    add_config_section(config, 'plugins', **{'gwvet.tabs': ''})

    # define metrics
    if category == 1:
        metrics = ['Deadtime']
    else:
        metrics = args.metric

    # define summary tab
    if category == 1:
        tab = configure_veto_tab(
            title, title, state, dqFlags[category].keys(), segfile,
            metrics, name='Summary', **{'veto-name': title})
    else:
        tab = configure_veto_tab(
            title, title, state, dqFlags[category].keys(), segfile,
            metrics, name='Summary', **{
                'veto-name': title,
                'event-channel':  args.event_channel,
                'event-generator': args.event_generator,
            })
    if len(categories) == 1:
        config.set(tab, 'index',
                   '%(gps-start-time)s-%(gps-end-time)s/index.html')
    for key, value in plots:
        if re.match('%\(flags\)s (?:plot-)?segments', value):
            config.set(tab, key, '%%(union)s,%s' % value)
            if '%s-labels' % key not in plots:
                config.set(tab, '%s-labels' % key, 'Union,%(flags)s')
        else:
            config.set(tab, key, value)
    
    # now a tab for each flag
    for flag in dqFlags[category]:
        if category == 1:
            tab = configure_veto_tab(
                flag, title, state, [flag], segfile, metrics)
        else:
            tab = configure_veto_tab(
                flag, title, state, [flag], segfile, metrics, **{
                    'event-channel': args.event_channel,
                    'event-generator': args.event_generator})
            if args.event_file:
                config.set(tab, 'event-file', args.event_file)
        for key, value in plots:
            config.set(tab, key, value)

    if len(categories) > 1 and category != categories[-1]:
        with open('%s.ini' % re_cchar.sub('-', title.lower()), 'w') as f:
            config.write(f)
            configs.append(os.path.abspath(f.name))

# configure summary job
if len(categories) > 1:
    state = states[categories[0]]
    add_config_section(config, 'state-%s' % state.key, key=state.key,
                       name=state.name, definition=state.definition,
                       filename=segfile)
    try:
        plots = pconfig.items('plots', raw=True)
    except NoSectionError:
        plots = []
    flags = [f for c in categories for f in dqFlags[c].keys()]
    tab = configure_veto_tab(
        'Impact of full veto definer file', None, state, flags,
        segfile, args.metric, shortname='Summary',
        index='%(gps-start-time)s-%(gps-end-time)s/index.html',
        **{'event-channel': args.event_channel,
           'event-generator': args.event_generator,
           'veto-name': 'All vetoes'})
    if args.event_file:
        config.set(tab, 'event-file', args.event_file)
    for key, value in plots:
        config.set(tab, key, value)
    with open('%s.ini' % re_cchar.sub('-', title.lower()), 'w') as f:
        config.write(f)
        configs.append(os.path.abspath(f.name))

os.chdir(os.pardir)

if args.verbose:
    print("Generated configuration files for each category")


# -----------------------------------------------------------------------------
#
# condor preparation
#
# -----------------------------------------------------------------------------

os.chdir(os.pardir)

# get condor variables
if getuser() == 'detchar':
    accgroup = 'ligo.prod.o1.detchar.dqproduct.gwpy'
else:
    accgroup = 'ligo.dev.o1.detchar.dqproduct.gwpy'

cmd = ['gw_summary_pipe',
       '--gps-start-time', str(start.seconds),
       '--gps-end-time', str(end.seconds),
       '--ifo', ifo,
       '--file-tag', 'gwpy-vet',
       '--condor-command', 'accounting_group=%s' % accgroup,
       '--condor-command', 'accounting_group_user=%s' % getuser(),
       '--on-segdb-error', args.on_segdb_error,
       '--output-dir', args.output_directory,
       ]
for cf in args.global_config:
    cmd.extend(('--global-config', cf))
for cf in configs:
    cmd.extend(('--config-file', cf))
if args.verbose:
    cmd.append('--verbose')

if args.verbose:
    print('Generating summary DAG via:\n')
    print(' '.join(cmd))
    print('')

proc = Popen(cmd)
proc.communicate()
sys.exit(proc.returncode)

